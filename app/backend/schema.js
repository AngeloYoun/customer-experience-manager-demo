module.exports = `type Account {
		industry: String,
		activityHistory: String,
		address: String,
		contacts: String,
		createdDate: String,
		createdBy: String,
		currencyIsoCode: String,
		description: String,
		hasActiveSubscription: String,
		hasOpenRenewal: String,
		history: String,
		id: ID,
		lastModifiedBy: String,
		lastModifiedDate: String,
		name: String,
		opportunities: [Opportunity],
		opportunitiesAmountLifetime: String,
		owner: String,
		phoneNumber: String,
		projects: [Project],
		recordType: String,
		subscriptionDaysLeft: String,
		subscriptionTerm: String,
		tickets: [Ticket],
		totalYearsAsSubscriber: String,
		type: String,
		website: String
	}

	type Opportunity {
		account: Account,
		accountName: String,
		accountSubscriptionTerm: String,
		accountSubscriptionYear: String,
		amount: String,
		autoRenewal: String,
		billingAddressId: String,
		billingAddressKey: String,
		closeDate: String,
		consultingAmount: String,
		contacts: String,
		createdBy: String,
		createdDate: String,
		currencyIsoCode: String,
		fieldHistory: String,
		forecasts: String,
		id: ID,
		lastModifiedBy: String,
		liferayVersion: String,
		listPriceTotal: String,
		localCurrencyAmount: String,
		name: String,
		opportunityLineItems: [OpportunityLineItem],
		optionType: String,
		otherAmount: String,
		otherSubscriptionAmount: String,
		overallDiscount: String,
		owner: String,
		precedingOpportunity: String,
		previousSubscriptionAmount: String,
		previousSubscriptionLevel: String,
		probability: String,
		productFamily: String,
		project: Project,
		projectName: String,
		recordType: String,
		renewalOpportunity: String,
		salesTax: String,
		shippingAddressId: String,
		shippingAddressKey: String,
		soldBy: String,
		stage: String,
		stageHistory: String,
		subscriptionAmount: String,
		subscriptionEndDate: String,
		subscriptionLevel: String,
		subscriptionStartDate: String,
		team: String,
		termType: String,
		total: String,
		totalYearsInMyTerm: String,
		touchpoints: String,
		trainingAmount: String,
		type: String
	}

	type OpportunityLineItem {
		currencyIsoCode: String,
		quantity: String,
		totalPrice: String,
		id: ID,
		startLocalDate: String,
		endLocalDate: String,
		term: String,
		termType: String,
		name: String
	}

	type Project {
		account: Account,
		accountName: String,
		createdBy: String,
		createdDate: String,
		goLiveDate: String,
		description: String,
		history: String,
		id: ID,
		lastModifiedBy: String,
		tickets: [Ticket],
		liferayVersion: String,
		name: String,
		opportunityCloseLocalDate: String,
		opportunities: [Opportunity],
		solutionType: String,
		salesforceProjectId: String,
		subscriptionEndDate: String,
		subscriptionStartDate: String,
		startDate: String,
		partnerFirstLineSupport: String,
		yearOnProjectSubscription: String
	}

	type Ticket {
		comments: String,
		component: String,
		description: String,
		escalationLevel: String,
		history: String,
		id: ID,
		issueClosedDate: String,
		issueDueDate: String,
		issueReportDate: String,
		issueReporter: String,
		project: Project,
		projectType: String,
		resolution: String,
		severity: String,
		status: String,
		summary: String
	}

	type Query {
		account(id: String): Account,
		accounts(name: String, industry: String, limit: Int, offset: Int): [Account],
		project(id: String): Project,
		ticket(id: Int): Ticket,
		getAccountByProject(id: String): Account,
		getOpportunitiesByAccount(id: String): [Opportunity],
		getOpportunitiesByProject(id: String): [Opportunity],
		opportunity(id: String): Opportunity,
		getProjectsByAccount(id: String): [Project],
		getTicketsByAccount(id: String): [Ticket],
		getTicketsByProject(id: String): [Ticket],
		getTicketsByProjectName(name: String): [Ticket]
	}

	schema {
		query: Query
	}
`;